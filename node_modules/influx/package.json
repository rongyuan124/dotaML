{
  "name": "influx",
  "version": "3.3.0",
  "description": "InfluxDB Client",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha -R dot",
    "travis-test": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bencevans/node-influx.git"
  },
  "keywords": [
    "influx",
    "influxdb",
    "time",
    "series",
    "client",
    "db"
  ],
  "author": {
    "name": "Ben Evans",
    "email": "ben@bensbit.co.uk",
    "url": "http://bensbit.co.uk"
  },
  "license": "MIT",
  "dependencies": {
    "request": "2.x",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.1",
    "istanbul": "^0.3.2",
    "mocha": "^1.21.4"
  },
  "readme": "# node-influx\n\nAn [InfluxDB](http://influxdb.org/) Node.js Client\n\n[![npm](http://img.shields.io/npm/v/influx.svg)](https://www.npmjs.org/package/influx)\n[![build](http://img.shields.io/travis/bencevans/node-influx/master.svg)](https://travis-ci.org/bencevans/node-influx)\n[![coverage](http://img.shields.io/coveralls/bencevans/node-influx/master.svg)](https://coveralls.io/r/bencevans/node-influx?branch=master)\n[![code climate](http://img.shields.io/codeclimate/github/bencevans/node-influx.svg)](https://codeclimate.com/github/bencevans/node-influx)\n[![Dependency Status](https://david-dm.org/bencevans/node-influx.png)](https://david-dm.org/bencevans/node-influx)\n[![gittip](https://img.shields.io/gittip/bencevans.svg)](https://www.gittip.com/bencevans/)\n\n\n[![Bountysource](https://www.bountysource.com/badge/issue?issue_id=3370228)](https://www.bountysource.com/issues/3370228-handle-chunked-query-responses?utm_source=3370228&utm_medium=shield&utm_campaign=ISSUE_BADGE) - Reward the contributors for their efforts on upcoming tasks.\n\n## Installation\n\n`npm install influx`\n\n## Usage\n\nCreate a client instance (`database` not required for all methods):\n\n```js\nvar client = influx({\n\n  //cluster configuration\n  hosts : [\n    {\n      host : 'localhost',\n      port : 8060 //optional. default 8086\n    }\n  ],\n  // or single-host configuration\n  host : 'localhost',\n  port : 8086, // optional, default 8086\n  username : 'dbuser',\n  password : 'f4ncyp4ass',\n  database : 'my_database'\n});\n\n```\n\nA list of all configuration values can be found below.\n\n\nYou can either pass a single hostname or an array of hostnames. Node-influx uses round-robin balancing to distribute\nthe requests across all configured hosts. When a host is unreachable, node-influx tries to resubmit the request to another\nhost and disables the failed host for 60 seconds (timeout value is configurable). If all servers fail to respond, node-influx raises an error.\n\n\n### Configuration options\n\n| Option        | Description   |\n|:------------- |:-------------|\n| username      | username |\n| password      | password      |\n| database | database name |\n| host | hostname, e.g. 'localhost' |\n| port [optional] |  influxdb port, default: 8086 |\n| hosts [optional] | Array of hosts for cluster configuration, e.g. [ {host: 'localhost', port : 8086},...] Port is optional |\n| depreciatedLogging [optional] | logging function for depreciated warnings, defaults to console.log |\n| failoverTimeout [optional] |  number of ms node-influx will take a host out of the balancing after a request failed, default: 60000 |\n| requestTimeout [optional] | number of ms to wait before a request times out. defaults to 'null' (waits until connection is closed). Use with caution! |\n| maxRetries [options] | max number of retries until a request raises an error (e.g. 'no hosts available'), default : 2 |\n| timePrecision [optional] |Time precision, default : ms |\n\n\n## Functions\n\n\n###setRequestTimeout\nSets the default timeout for a request. When a request times out the host is removed from the list of available hosts\nand the request is resubmitted to the next configured host. The default value is ```null``` (will wait forever for a respose).\n\nBe careful with this setting. If the value is too low, slow queries might disable all configured hosts.\n\n```js\nsetRequestTimeout( value ) { }\n```\n\n###setFailoverTimeout\nSets the failover timeout for a host. After a host has been removed from balancing, it will be re-enabled after 60\nseconds (default). You can configure the timeout value using this function.\n\n```js\nsetFailoverTimeout( value ) { }\n```\n\n###getHostsAvailable\nReturns an array of available hosts.\n\n```js\ngetHostsAvailable( ) { }\n```\n\n###getHostsDisabled\nReturns an array of disabled hosts. This can be useful to check whether a host is unresponsive or not.\n```js\ngetHostsDisabled( ) { }\n```\n\n\n###createDatabase\nCreates a new database - requires cluster admin privileges\n\n```js\ncreateDatabase(databaseName, [options,] callback) { }\n```\n[Options can be an array of shard spaces and/or continuous queries](http://influxdb.com/docs/v0.8/advanced_topics/sharding_and_storage.html#configuration).\n\n###deleteDatabase\nDeletes a database - requires cluster admin privileges\n\n```js\ndeleteDatabase(databaseName, callback) { }\n```\n\n###getDatabaseNames\nReturns array of database names - requires cluster admin privileges\n\n```js\ngetDatabaseNames(function(err,arrayDatabaseNames){}) { }\n```\n\n###getSeriesNames\nReturns array of series names from given database - requires database admin privileges\n\n```js\ngetSeriesNames(databaseName, function(err,arraySeriesNames){} ) { }\n```\n\n###getUsers\nReturns an array of database users - requires cluster admin privileges\n\n```js\ngetUsers(databaseName, callback) { }\n```\n\n###getUser\nReturns a database user - requires cluster admin privileges\n\n```js\ngetUser(databaseName, username, callback) { }\n```\n\n###createUser\nCreates a new database user - requires cluster admin privileges\n\n```js\ncreateUser(databaseName, username, password, callback) { }\n```\n\n###updateUser\nUpdates database user - requires cluster admin privileges\n\n```js\nupdateUser(databaseName, username, options, callback) { }\n\ne.g.:\n// adds database admin privilege\ninfluxDB.updateUser('myDatabase','johndoe',{admin:true},callback);\n```\n\n\n###writePoint\nWrites a point to a series - requires database user privileges\n\n```js\nvar point = { attr : value, time : new Date()};\nwritePoint(seriesName, point, options, callback) { }\n```\n\n###writePoints\nWrites multiple point to a series - requires database user privileges\n\n```js\nvar points = [ {attr : value, time : new Date()}, {attr : value2, time : new Date()}];\nwritePoints(seriesName, points, options, callback) { }\n```\n\n###writeSeries\nWrites multiple point to multiple series - requires database user privileges\n\n```js\nvar points = [ {attr : value, time : new Date()}, {attr : value2, time : new Date()}];\nvar points2 = [ {attr : value, time : new Date()}, {attr : value2, time : new Date()}];\n\nvar series = {\n    series_name_one : points,\n    series_name_two : points2\n};\n\nwriteSeries(series, options, callback) { }\n```\n*Please note that there's a POST limit at about 2MB per request. Do not submit too many points at once.*\n\n###query\nQueries the database - requires database user privileges\n\n```js\nvar query = 'SELECT MEDIAN(column) FROM myseries WHERE time > now() - 24h';\nquery(query, callback) { }\n\n\nquery(query, callback) { }\n\n```\n\n###getContinuousQueries\nFetches all continuous queries from a database - requires database admin privileges\n\n```js\ngetContinuousQueries( [databaseName,] callback) { }\n```\n\n###dropContinuousQuery\nDrops a continuous query from a database - requires database admin privileges\n\n```js\ndropContinuousQuery( [databaseName,] queryID, callback) { }\n```\n\n\n###getShardSpaces\nReturns array of all shard spaces for a database - requires cluster admin privileges\n\n```js\ngetShardSpaces( [databaseName,] function(err, arrayShardSpaces){} ) { }\n```\n\n###createShardSpace\nCreates a new shard space for a database - requires cluster admin privileges\n\n```js\nvar shardSpace = {\n    name: '30d_shard',\n    retentionPolicy: '30d',\n    shardDuration: '7d',\n    regex: '/.*/',\n    replicationFactor: 1,\n    split: 1\n};\ncreateShardSpace( [databaseName,] shardSpace, callback) {}\n```\n\n###updateShardSpace\nUpdates a shard space - requires cluster admin privileges\n\n```js\nvar updatedShardSpace = {\n    retentionPolicy: '60d',\n    shardDuration: '14d',\n    regex: '/.*/',\n    replicationFactory: 1,\n    split: 1\n};\nupdateShardSpace( [databaseName,] shardSpaceName, updatedShardSpace, callback) { }\n```\n\n###deleteShardSpace\nDeletes a shard space - requires cluster admin privileges\n\n```js\ndeleteShardSpace( [databaseName,] shardSpaceName, callback) { }\n```\n\n\n###dropSeries\nDrops a series from a database - requires database admin privileges\n\n```js\nquery ( [databaseName ,] seriesName, callback) { }\n```\n\n\n\nAs Jeff Atwood puts it... [Read the source, Luke](http://www.codinghorror.com/blog/2012/04/learn-to-read-the-source-luke.html). If you're still stuck, read the `./examples/*` files and the `./test.js` file.\n\n## Testing\n\nEither install InfluxDB or use a docker container to run the service:\n\n    docker run -d -p 8083:8083 -p 8086:8086 --expose 8090 --expose 8099 tutum/influxdb\n\nThen to run the test harness use `npm test`.\n\n\n## Licence\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bencevans/node-influx/issues"
  },
  "_id": "influx@3.3.0",
  "dist": {
    "shasum": "f359062f0f1a306a79b40c1a080f308b4c49dc9c"
  },
  "_from": "influx@^3.3.0",
  "_resolved": "https://registry.npmjs.org/influx/-/influx-3.3.0.tgz"
}
